# -*- coding: utf-8 -*-
"""Customer Review Analysis Agent .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y2RCHDPQUm852v1aBeQc-cUitZ6PyLue
"""

!pip install -U langchain langchain-google-genai google-genai

"""LLM API and setting environmental variable"""

from getpass import getpass
import os

# Prompt user for Google AI Studio API key (hidden input)
google_api_key = getpass("Please enter your Google API key: ")

# Set it as an environment variable
os.environ["GOOGLE_API_KEY"] = google_api_key

print("Google API key set successfully.")

from typing import List
from pydantic import BaseModel, Field

from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import PydanticOutputParser

google_studio = ChatGoogleGenerativeAI(
    model="gemini-1.5-flash",  # or "gemini-1.5-pro"
    temperature=0
)

"""Building an AI system that can analyze customer reviews summaries and perform complex analysis. for each review, use Google Gemini to do the following:

1. Summarize the review in at most 3 lines.
2. Highlight the positives and negatives.
3. Describe the overall sentiment of the reviews (positives, negatives, neutral)
4. Display 3-5 emotions that are expressed in customer review.
5. If statement in positive thank them via email for the reivew.
6. If statement is negative then write a mail to apologize with appropriate response.

Reviews
"""

# Sample reviews
reviews = [
    "Absolutely thrilled with this laptop! The performance is lightning fast, the display is crisp, and the battery easily lasts over 10 hours. Delivered a day earlier than expected â€” couldnâ€™t be happier!",
    "Good build quality and smooth performance for everyday tasks. The keyboard is comfortable to type on. Delivery was on time, but the packaging could have been better.",
    "This laptop exceeded my expectations! Boot time is super quick, the screen colors are vibrant, and it handles multitasking effortlessly. Customer support was polite and helpful when I had a query.",
    "Satisfied overall â€” the laptop runs well for my work needs, and the design feels premium. However, delivery was delayed by two days, which was a bit frustrating.",
    "The laptop is decent for the price. Runs quietly and stays cool even after long hours. Arrived on time, but I wish the speakers were a bit louder."
]

"""Define Data Structure"""

# ðŸ›  Defined data structure
class ReviewAnalysis(BaseModel):
    Summary: str = Field(description="A brief summary of the review in 3 lines")
    Positives: List[str] = Field(description="A list of positives mentioned by the customer in the review")
    Negatives: List[str] = Field(description="A list of negatives mentioned by the customer in the review")
    Sentiment: str = Field(description="One word showing whether the sentiment is positive, negative, or neutral")
    Emotions: List[str] = Field(description="A list of 3-5 emotions expressed by the customer in the review")
    Email: str = Field(description="Detailed email to the customer based on the sentiment")

# ðŸ“‹ Create parser
parser = PydanticOutputParser(pydantic_object=ReviewAnalysis)

"""Prompt Template"""

# Prompt template
prompt_txt = """
Analyze the customer review given below and generate the response based on the instructions mentioned below in the format instructions.
Also remember to write a detailed email response for the email field based on these conditions:
 - Email should be addressed to "Dear Customer" and signed with "Service Agent".
 - Thank them if the review is good.
 - Apologize if the review is bad.

Format instructions:
{format_instructions}

Review:
{review}
"""



# Use from_template for single-template prompt
prompt = ChatPromptTemplate.from_template(
    template=prompt_txt
).partial(format_instructions=parser.get_format_instructions())

# Combine into chain
llmchain = prompt| google_studio | parser

import json

# Assuming reviews is a list and you want to process the first review
input_review = reviews[0]

result = llmchain.invoke({"review": input_review})

# Use model_dump() to get a dict (if result supports it)
structured_output = result.model_dump()

# Print the structured output as formatted JSON
print(json.dumps(structured_output, indent=4))

for review in reviews:
    result = llmchain.invoke({"review": review})
    output = result.model_dump() if hasattr(result, "model_dump") else json.loads(result)
    print(json.dumps(output, indent=4))

import pandas as pd

# Make pandas display full text without truncating
pd.set_option('display.max_colwidth', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', None)

# Process all reviews into structured dicts
structured_reviews = [llmchain.invoke({"review": review}).model_dump() for review in reviews]

# Create DataFrame
df = pd.DataFrame(structured_reviews)

# Show DataFrame (like screenshot format)
display(df)